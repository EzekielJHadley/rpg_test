effects are a kind of modifier
there are two kinds of effects, continuous and instant
continuous occur at the start of the turn, you can only have one type of effect at a time (like poison)
	(should a new one replace or have no effect?)
instant effects happen when they are applied
	(some can affect continuous effects, like remove poison)


effects can heal/damage, affect a stat, affect attacks (incoming and outgoing)

effects have a time limit (how many turns they last)

continuous effects attach an animation to player sprite, can be activated with signal and destroyed with signal


items have effects
	consumables will usually have instant effects





status effects are keys to a datascructure in the character sheet, so that only one can exist at a time
	this structure needs to be built from some other class that holds the list of possible status effects (OR JSON)

when an effect fires off it will send a signal to the effect scene to play its animation
cause the damage
and then await the end signal of the effect scene
	so that we don't get multiple effects firing off at once.



effect comes in from an attack
defend calls another internal character method called apply_effect
apply_effect gets the effect scene from the effect and adds it to character.tscn
	the effect scene subscribes to a signal in teh effects object
apply_effect then adds it to the stats object
	stats object determines what kind of effect and adds it to the appropriate status effect slot


cure poison
effect comes in to defend
defend calls apply_effect
apply_effect adds it to the stats object
	there is no scene, so it doesn't add anything to character.tscn
	stats object sees that it is an instant object and calls the effect (passing itself in)
	the effect calls cure_status_effect(poison)
		the corresponding status effect gets called to end
		singal to destroy effect scene is called


effect types
	poison
	instant



	print("Fire enum is: " + str(Damage_info.Dmg_type.FIRE))
	print(Damage_info.Dmg_type.keys()[Damage_info.Dmg_type.FIRE] + " enum is: " + str(Damage_info.Dmg_type["FIRE"]))
AmyUpdateTest


dialogue

assumptions
	SPEAKER will always be the one with the JSON (i.e. it is the one that passes the json to INTERACTION object)
	The LISTENER is any character listed in the DIALOGUE object, that is not the SPEAKER
	
	INTERACTION object is separate from the UI, it will pass single DIALOGUE object to UI
		the UI will parse the DIALOGUE object
	
	Target is specified in the EFFECT in the DIALOGUE object, INTERACTION object needs to determine how that resolves
		i.e. turning the string into target and effect  
	
INTERACTION object
	SPEAKER, who is talking and the source of the JSON file
	
	read in the json object, sets the SPEAKER and builds the DIALOGUE DATA STRUCTURE
		which consists of linked DIALOGUE objects

dialogue object
	OWNER (SPEAKER or LISTENER)
		gets portrait from here
	dialogue text
	dictionary -> reply : next dialogue object
	EFFECT: its own object that specifies WHO, WHAT, and HOW MUCH  
	



1) Speaker loads JSON into conversation object

2) passes conversation object to Scene
	scene passes in the list of available characters
	sends first Dialogue object to UI
	
3) UI displays text, character portrait, and a list of responses for the player
	As UI displays text it sends Signal up to Scene, to tell speaker to Emote
	When response is Selected, UI Signals Scene with choice
	
4) Scene uses Choice to tell Player Character or Ally to emote and any damage to any character
5) Scene feeds choice into conversation object to get next Dialogue object, goto step 2

6) The Last Dialogue object closes UI

Dialogue  Object knows who is who from list of available characters given to the Conversation object by Scene
	from the name text in the JSON it will find the first valid name_## from the list and use that

